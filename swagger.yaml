openapi: 3.0.0
info:
  title: Ticket Management API
  description: A simple API to manage support tickets
  version: 1.0.0
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "supersecurepassword123"
    Ticket:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the ticket
          example: 60d21b4667d0d8992e610c85
        title:
          type: string
          description: Title of the ticket
          example: Cannot access customer portal
        description:
          type: string
          description: Detailed description of the issue
          example: Getting 404 error when trying to access the customer portal
        status:
          type: string
          description: Current status of the ticket
          enum: [pending, active, monitoring, closed]
          example: active
        customer:
          type: object
          properties:
            _id:
              type: string
              example: 60d21b4667d0d8992e610c86
            name:
              type: string
              example: John Doe
            email:
              type: string
              example: john.doe@example.com
        agent:
          type: object
          properties:
            _id:
              type: string
              example: 60d21b4667d0d8992e610c87
            name:
              type: string
              example: Jane Smith
        createdAt:
          type: string
          format: date-time
          example: 2023-05-17T14:32:22.001Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-05-18T09:12:45.234Z
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Failed to fetch tickets
        error:
          type: string
          example: Internal server error
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully."

security:
  - bearerAuth: []   # üîí Applied globally


paths:
  /auth/admin/seed:
    get:
      tags:
        - Authentication
      summary: Seed the database with an Admin user
      security: []   # ‚ùóÔ∏è Override: No auth required here
      description: |
        Seeds the system with a default Admin account if one doesn't already exist.
        Useful for initial setup or development environments.
      responses:
        '201':
          description: Admin seeded successfully
        '409':
          description: Admin already exists
        '500':
          description: Server error
  /auth/customer/register:
    post:
      tags:
        - Authentication
      summary: Register a new customer account
      security: []   # ‚ùóÔ∏è Override: No auth required here 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Missing fields
        '409':
          description: User already exists
        '500':
          description: Server error

  /auth/agent/register:
    post:
      tags:
        - Authentication
      summary: Register a new agent account (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Missing fields
        '403':
          description: Access denied (only Admin can register agents)
        '409':
          description: User already exists
        '500':
          description: Server error
  /auth/login:
    post:
      summary: User login
      security: []   # ‚ùóÔ∏è Override: No auth required here 
      requestBody:
        description: Login to an account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "agent1@hpe.com"
                password:
                  type: string
                  example: "password1"
      responses:
          '200':
            description: Login successful
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          '401':
            description: Invalid credentials
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Invalid email or password."
  /tickets/create:
    post:
      summary: Create a new ticket
      requestBody:
        description: Ticket details to create a new ticket
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Issue with server"
                description:
                  type: string
                  example: "The server is not responding."
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "Issue with server"
                  description:
                    type: string
                    example: "The server is not responding."
                  status:
                    type: string
                    enum:
                      - Pending
                      - Active
                      - Monitoring
                      - Closed
                    example: "Pending"
        '400':
          description: Title and description are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Title and description are required."
  /tickets/getAll:
    get:
      summary: Retrieve all tickets with pagination
      description: Returns a paginated list of tickets with optional sorting
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (starting from 1)
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of tickets per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: createdAt
            enum: [createdAt, status]
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            default: desc
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalItems:
                    type: integer
                    example: 48
                  itemsPerPage:
                    type: integer
                    example: 10
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - User is not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tickets/getById/{id}:
    get:
      summary: Get a specific ticket by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The ticket was found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "Issue with server"
                  description:
                    type: string
                    example: "The server is not responding."
                  status:
                    type: string
                    enum:
                      - Pending
                      - Active
                      - Monitoring
                      - Closed
                    example: "Pending"
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ticket not found."
  /tickets/getOpen:
    get:
      summary: Get all open tickets
      responses:
        '200':
          description: A list of open tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "Issue with server"
                    description:
                      type: string
                      example: "The server is not responding."
                    status:
                      type: string
                      enum:
                        - Pending
                        - Active
                        - Monitoring
                        - Closed
                      example: "Pending"
        '404':
          description: No open tickets found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No open tickets found."
  /tickets/getClosed:
    get:
      summary: Get all closed tickets
      responses:
        '200':
          description: A list of closed tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "Issue with server"
                    description:
                      type: string
                      example: "The server is not responding."
                    status:
                      type: string
                      enum:
                        - Pending
                        - Active
                        - Monitoring
                        - Closed
                      example: "Closed"
        '404':
          description: No closed tickets found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No closed tickets found."
  /tickets/filter:
    post:
      summary: Filter tickets based on criteria
      requestBody:
        description: Criteria to filter tickets
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - Pending
                    - Active
                    - Monitoring
                    - Closed
                title:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: A list of filtered tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "Issue with server"
                    description:
                      type: string
                      example: "The server is not responding."
                    status:
                      type: string
                      enum:
                        - Pending
                        - Active
                        - Monitoring
                        - Closed
                      example: "Pending"
        '404':
          description: No tickets found with the specified criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No tickets found with the specified criteria."
  /tickets/updateById/{id}:
    patch:
      summary: Update a ticket by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Fields to update on the ticket
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum:
                    - Pending
                    - Active
                    - Monitoring
                    - Closed
      responses:
        '200':
          description: Ticket updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "Issue with server"
                  description:
                    type: string
                    example: "The server is not responding."
                  status:
                    type: string
                    enum:
                      - Pending
                      - Active
                      - Monitoring
                      - Closed
                    example: "Active"
        '400':
          description: Invalid status provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid status. Must be one of: Pending, Active, Monitoring, Closed."
        '404':
          description: Ticket not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ticket not found."
