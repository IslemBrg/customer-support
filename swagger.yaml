openapi: 3.0.3
info:
  title: Ticket Management API
  version: 1.0.0
  description: API documentation for Authentication and Ticket Management.

servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    TicketCreate:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
        description:
          type: string
    TicketUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - Pending
            - Active
            - Monitoring
            - Closed
          description: Status of the ticket (e.g., Pending, Active, Monitoring, Closed)

paths:

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        401:
          description: Invalid email or password

  /auth/customer/register:
    post:
      summary: Register a new customer
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        201:
          description: User registered successfully
        400:
          description: All fields are required
        409:
          description: User already exists

  /auth/agent/register:
    post:
      summary: Register a new agent (admin only)
      tags:
        - Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        201:
          description: Agent registered successfully
        400:
          description: All fields are required
        403:
          description: Access denied
        409:
          description: User already exists

  /auth/admin/seed:
    get:
      summary: Seed an admin account
      tags:
        - Auth
      responses:
        201:
          description: Admin seeded successfully
        409:
          description: Admin already exists

  /tickets/create:
    post:
      summary: Create a ticket (customer only)
      tags:
        - Ticket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreate'
      responses:
        201:
          description: Ticket created successfully
        400:
          description: Title and description are required

  /tickets/getAll:
    get:
      summary: Get all tickets (admin only)
      tags:
        - Ticket
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
          description: Number of tickets per page
        - name: sort
          in: query
          schema:
            type: string
          description: Field to sort by
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
      responses:
        200:
          description: Tickets fetched successfully
        500:
          description: Failed to fetch tickets

  /tickets/getByNumber/{num}:
    get:
      summary: Get ticket by number
      tags:
        - Ticket
      security:
        - bearerAuth: []
      parameters:
        - name: num
          in: path
          required: true
          schema:
            type: integer
          description: Ticket number
      responses:
        200:
          description: Ticket found
        404:
          description: Ticket not found

  /tickets/updateByNumber/{number}:
    patch:
      summary: Update ticket by number (agent only)
      tags:
        - Ticket
      security:
        - bearerAuth: []
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
          description: Ticket number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdate'
      responses:
        200:
          description: Ticket updated successfully
        404:
          description: Ticket not found
        500:
          description: Error updating ticket

  /tickets/filter:
    get:
      summary: Filter tickets by status, customer, or agent
      tags:
        - Ticket
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum:
              - Pending
              - Active
              - Monitoring
              - Closed
          description: Filter tickets by their status (e.g., Pending, Active, Monitoring, Closed)
        - name: customer
          in: query
          schema:
            type: string
          description: Filter tickets by customer ID
        - name: agent
          in: query
          schema:
            type: string
          description: Filter tickets by agent ID
      responses:
        200:
          description: Filtered tickets list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    status:
                      type: string
                      enum:
                        - Pending
                        - Active
                        - Monitoring
                        - Closed
                      description: Status of the ticket (e.g., Pending, Active, Monitoring, Closed)
                    customer:
                      type: string
                    agent:
                      type: string
        500:
          description: Error filtering tickets

  /tickets/deleteByNumber/{number}:
    delete:
      summary: Delete ticket by number (agent only)
      tags:
        - Ticket
      security:
        - bearerAuth: []
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
          description: Ticket number
      responses:
        200:
          description: Ticket deleted successfully
        404:
          description: Ticket not found
        500:
          description: Error deleting ticket
